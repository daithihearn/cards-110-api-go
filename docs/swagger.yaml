basePath: /api/v1
definitions:
  api.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  game.Call:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - Pass
  game.CardName:
    enum:
    - EMPTY
    type: string
    x-enum-varnames:
    - EMPTY_CARD
  game.CreateGameRequest:
    properties:
      name:
        type: string
      players:
        items:
          type: string
        type: array
    type: object
  game.Game:
    properties:
      adminId:
        type: string
      id:
        type: string
      name:
        type: string
      players:
        items:
          $ref: '#/definitions/game.Player'
        type: array
      revision:
        type: integer
      status:
        $ref: '#/definitions/game.Status'
      timestamp:
        type: string
    type: object
  game.Hand:
    properties:
      currentPlayerId:
        type: string
      leadOut:
        $ref: '#/definitions/game.CardName'
      playedCards:
        items:
          $ref: '#/definitions/game.PlayedCard'
        type: array
      timestamp:
        type: string
    type: object
  game.PlayedCard:
    properties:
      card:
        $ref: '#/definitions/game.CardName'
      playerId:
        type: string
    type: object
  game.Player:
    properties:
      call:
        $ref: '#/definitions/game.Call'
      cardsBought:
        type: integer
      id:
        type: string
      rings:
        type: integer
      score:
        type: integer
      seatNumber:
        type: integer
      teamId:
        type: string
      winner:
        type: boolean
    type: object
  game.Round:
    properties:
      completedHands:
        items:
          $ref: '#/definitions/game.Hand'
        type: array
      currentHand:
        $ref: '#/definitions/game.Hand'
      dealerId:
        type: string
      dealerSeeingCall:
        type: boolean
      goerId:
        type: string
      number:
        type: integer
      status:
        $ref: '#/definitions/game.RoundStatus'
      suit:
        $ref: '#/definitions/game.Suit'
      timestamp:
        type: string
    type: object
  game.RoundStatus:
    enum:
    - CALLING
    type: string
    x-enum-varnames:
    - Calling
  game.State:
    properties:
      cards:
        items:
          $ref: '#/definitions/game.CardName'
        type: array
      iamAdmin:
        type: boolean
      iamDealer:
        type: boolean
      iamGoer:
        type: boolean
      iamSpectator:
        type: boolean
      id:
        type: string
      isMyGo:
        type: boolean
      maxCall:
        $ref: '#/definitions/game.Call'
      me:
        $ref: '#/definitions/game.Player'
      players:
        items:
          $ref: '#/definitions/game.Player'
        type: array
      previousRound:
        $ref: '#/definitions/game.Round'
      revision:
        type: integer
      round:
        $ref: '#/definitions/game.Round'
      status:
        $ref: '#/definitions/game.Status'
    type: object
  game.Status:
    enum:
    - ACTIVE
    type: string
    x-enum-varnames:
    - Active
  game.Suit:
    enum:
    - EMPTY
    type: string
    x-enum-varnames:
    - Empty
  profile.Profile:
    properties:
      id:
        type: string
      lastAccess:
        type: string
      name:
        type: string
      picture:
        type: string
      pictureLocked:
        type: boolean
    type: object
  profile.UpdateProfileRequest:
    properties:
      forceUpdate:
        type: boolean
      name:
        type: string
      picture:
        type: string
    required:
    - name
    type: object
  settings.Settings:
    properties:
      autoBuyCards:
        type: boolean
    type: object
  stats.PlayerStats:
    properties:
      gameId:
        type: string
      rings:
        type: integer
      score:
        type: integer
      timestamp:
        type: string
      winner:
        type: boolean
    type: object
info:
  contact: {}
  description: An API for playing the card game called 110. 110 is a game based on
    the game 25 and is played primarily in Ireland
  title: Cards 110 API
  version: 8.0.0
paths:
  /game:
    put:
      consumes:
      - application/json
      description: Creates a new game with the given name and players
      operationId: create-game
      parameters:
      - description: Game
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/game.CreateGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.Game'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}:
    delete:
      description: Deletes a game with the given ID
      operationId: delete-game
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
    get:
      description: Returns a game with the given ID
      operationId: get-game
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.Game'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}/buy:
    put:
      description: When in the Buying state, the Goer can buy cards from the deck
      operationId: buy
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}/call:
    put:
      description: Makes a call for the current user in the game with the given ID
      operationId: call
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      - description: Call
        in: query
        name: call
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}/play:
    put:
      description: When in the Playing state, the current player can play a card
      operationId: play
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      - description: Card
        in: query
        name: card
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}/state:
    get:
      description: Returns the state of a game with the given ID for the current user
      operationId: get-game-state
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      - description: Revision
        in: query
        name: revision
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.State'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/{gameId}/suit:
    put:
      description: When in the Called state, the Goer can select the suit and what
        cards they want to keep from their hand and the dummy hand
      operationId: select-suit
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /game/all:
    get:
      description: Returns all games
      operationId: get-all-games
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/game.Game'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Game
  /profile:
    get:
      description: Returns the user's profile.
      operationId: get-profile
      parameters:
      - description: Player ID
        in: query
        name: playerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Updates the user's profile or creates it if it doesn't exist.
      operationId: update-profile
      parameters:
      - description: Profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Profile
  /profile/all:
    get:
      description: Returns all profiles.
      operationId: get-all-profiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/profile.Profile'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Profile
  /settings:
    get:
      description: Returns the user's settings.
      operationId: get-settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/settings.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Updates the user's settings.
      operationId: update-settings
      parameters:
      - description: Settings
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/settings.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/settings.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Settings
  /stats:
    get:
      description: Returns stats for the current user
      operationId: get-stats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stats.PlayerStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - Bearer: []
      tags:
      - Stats
  /stats/{playerId}:
    get:
      description: Returns stats for a player
      operationId: get-stats-for-player
      parameters:
      - description: Player ID
        in: path
        name: playerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stats.PlayerStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Stats
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
